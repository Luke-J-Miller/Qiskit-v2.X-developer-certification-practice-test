"In Qiskit, an *abstract* circuit is defined over ____ and arbitrary high-level operations.",hardware qubits,virtual qubits,logical qubits only,pulse channels,virtual qubits,Abstract circuits use virtual qubits and high-level ops; mapping to hardware yields a physical circuit via transpile().
Which function is the top-level entry point to convert an abstract circuit to a physical one for a backend/target?,assemble(),transpile(),run(),execute(),transpile(),Use qiskit.compiler.transpile to map a circuit to a backend's ISA/basis/coupling constraints.
What does QuantumCircuit.ensure_physical() do?,Compiles to basis gates and enforces coupling,Marks the circuit as physical in metadata without enforcing basis/coupling,Converts all gates to pulses,Adds measurements to every qubit,Marks the circuit as physical in metadata without enforcing basis/coupling,ensure_physical rewrites metadata to treat indices as hardware qubits; it does not compile like transpile().
The scalar elements of QuantumCircuit.data are instances of:,Instruction,Gate,CircuitInstruction,Operation,CircuitInstruction,QuantumCircuit.data holds CircuitInstruction objects pairing an operation with specific qubit/clbit operands.
Which statement is true about CircuitInstruction objects in QuantumCircuit.data?,They are fully mutable views and edits mutate the circuit,They are Rust-backed handles; you generally shouldn't mutate them directly,They are plain tuples and immutable,"They store only names, not operands",They are Rust-backed handles; you generally shouldn't mutate them directly,CircuitInstruction is a handle to internal data; use QuantumCircuit methods or transpiler/DAG to mutate circuits.
Methods like QuantumCircuit.append(...) return an InstructionSet primarily to:,Collect multiple inserted instructions for limited post-append edits,Provide a simulator interface,Return measurement outcomes,Replace BasisTranslator,Collect multiple inserted instructions for limited post-append edits,InstructionSet is a minimal legacy handle for slices of appended instructions; heavy mutation is discouraged.
Which is the minimal interface for something that can appear as an operation in a CircuitInstruction?,ControlledGate,Gate,Instruction,Operation,Operation,Operation is the minimal abstract interface; Instruction/Gate/ControlledGate are concrete subclasses.
Which class represents a hardware-executable instruction that may be non-unitary?,Operation,Instruction,Gate,ControlledGate,Instruction,Instruction can be unitary or not; Gate is specifically unitary.
Which class adds unitarity guarantees plus to_matrix() and control() methods?,Operation,Instruction,Gate,CircuitInstruction,Gate,Gate is a unitary Instruction and provides to_matrix() and control().
ControlledGate is best described as:,An annotation that always defers to compiler,A unitary Gate with built-in control structure and lazy synthesis,A non-unitary control-flow Op,A Measure wrapper,A unitary Gate with built-in control structure and lazy synthesis,ControlledGate subclasses Gate to represent controlled versions with built-in synthesis of controls.
SingletonInstruction/SingletonGate are used to:,Create many mutable copies by default,Provide canonical singleton objects for standard ops,Disable decomposition,Force pulse scheduling,Provide canonical singleton objects for standard ops,"qiskit.circuit.singleton contains singleton forms of Instruction/Gate/ControlledGate (e.g., XGate())."
"If you need a safe-to-mutate copy of a possibly singleton object, you should first call:",freeze(),copy(),to_mutable(),as_gate(),to_mutable(),"to_mutable() returns an owned, mutable copy; base_class gives the underlying class type."
Which operation measures a Qubit into a Clbit in the computational basis?,Measure,Reset,Delay,Barrier,Measure,Measure consumes a Qubit and writes its outcome into a Clbit.
Reset is:,Unitary and reversible,A non-unitary op that prepares |0⟩ incoherently,A control-flow op,A delay-only directive,A non-unitary op that prepares |0⟩ incoherently,"Reset returns a qubit to |0⟩, collapsing entanglement."
"Delay(duration, unit) does what?",Adds a global phase e^{iθ},Instructs an idle wait on specific qubits,Forces transpiler to stop optimizing,Resets all qubits,Instructs an idle wait on specific qubits,Delay inserts real-time waits; units like 'dt' or SI seconds are supported; errors raise CircuitError.
Barrier(...) guarantees:,Hardware latency alignment,No optimizations cross the barrier,Fewer CX gates,Measurement error mitigation,No optimizations cross the barrier,"Barrier is a directive: it can be ignored by backends, but transpiler optimizations are constrained not to cross it."
"Store(lvalue, rvalue) is used to:",Write a real-time classical expression into a typed storage location,Save statevectors to disk,Store Parameters at compile-time,Append custom gates,Write a real-time classical expression into a typed storage location,Store writes Expr results (qiskit.circuit.classical) into Var memory; it takes no qubit/clbit operands.
Real-time classical expressions are built from which base class?,ParameterExpression,Expr,Parameter,Variable,Expr,qiskit.circuit.classical.expr.Expr nodes represent typed expressions evaluated during circuit execution.
Which class represents a typed storage location for real-time classical computation?,Var,Parameter,ParameterVector,Clbit,Var,Var is a typed variable in the real-time classical system; it can be inputs or created via add_var().
Compile-time parametrization of angles uses which classes?,Var and Expr,Parameter and ParameterExpression,Clbit and Qubit,Type and Var,Parameter and ParameterExpression,Parameters are symbolic and simplified at compile time; assign_parameters binds numeric values before execution.
Which statement best contrasts compile-time Parameters with real-time Expr?,Both perform floating-point arithmetic only,Parameters are symbolic (math simplification); Expr follows discrete classical types during execution,Expr simplifies algebra symbolically,Parameters are stored in Var memory during execution,Parameters are symbolic (math simplification); Expr follows discrete classical types during execution,ParameterExpression can simplify like (x+y−x)/y→1; Expr respects classical machine types and does not.
Which are Qiskit control-flow Instructions?,"IfElseOp, WhileLoopOp, ForLoopOp, SwitchCaseOp, BoxOp","Barrier, Delay, Reset","CX, CZ, CCX","Measure, Reset, Store","IfElseOp, WhileLoopOp, ForLoopOp, SwitchCaseOp, BoxOp",ControlFlowOp subclasses implement classical control flow within circuits.
get_control_flow_name_mapping() returns:,Names→gate matrices,Names→control-flow classes,Backend configs,Target coupling maps,Names→control-flow classes,It maps instruction names like 'if_else' to their corresponding ControlFlowOp class.
"Within a ControlFlowOp, subcircuit blocks must:",Use any number of bits arbitrarily,All have identical numbers/order of qubits and clbits matching the outer instruction operands,Contain only unitary gates,Be fully mutable views of the outer circuit,All have identical numbers/order of qubits and clbits matching the outer instruction operands,Blocks must be consistent so qubit/clbit mapping by zip() is well-defined; builders enforce this.
"When consuming control-flow blocks, you should treat inner block bits as:",Independent unrelated objects,The same identities as outer bits by index order mapping,Always identical Python objects,Always in reverse order,The same identities as outer bits by index order mapping,"Use qubit_map = dict(zip(block.qubits, outer.qubits)) and similar for clbits to maintain coherence."
Qiskit labels bits in bitstrings with index 0 at the:,Left-most,Right-most,Random,Middle,Right-most,Right-most bit is index 0; left-most is n−1.
"In circuit drawings, Qiskit places which bit on top?",Highest-index bit,Lowest-index bit,Random,Clbits only,Lowest-index bit,Qubit 0 is drawn at the top.
Qiskit’s statevector convention orders amplitudes such that the amplitude of |x⟩ is at index:,x reversed,x,2^x,x+1,x,Kronecker product ordering matches binary value x with statevector[x].
"For controlled gates, Qiskit argument order is:","target(s) first, then control(s)","control(s) first, then target(s)",arbitrary,alphabetical by register name,"control(s) first, then target(s)","E.g., qc.cx(0,1): qubit 0 is control, 1 is target; matrix forms follow this convention."
Which tool helps analyze whether two operations commute for optimization opportunities?,EquivalenceLibrary,CommutationChecker,BasisTranslator,SessionEquivalenceLibrary,CommutationChecker,CommutationChecker lets you check commutation relations useful for reordering/simplifying circuits.
"pauli_twirl_2q_gates(circuit, ...) primarily does what?",Adds Pauli-frame randomization around specified two-qubit gates,Converts to pulses,Counts CX gates,Performs error mitigation postprocessing,Adds Pauli-frame randomization around specified two-qubit gates,It generates twirled copies around gates like CX/CZ/ECR/iSWAP to shape coherent errors into stochastic ones.
"If you need the default equivalence relations for standard gates, use:",StandardEquivalenceLibrary,SessionEquivalenceLibrary,CommutationChecker,Target,StandardEquivalenceLibrary,StandardEquivalenceLibrary is the immutable base; SessionEquivalenceLibrary is the mutable global used by BasisTranslator.
Circuit-specific errors typically raise:,QiskitError,CircuitError,ValueError,RuntimeError,CircuitError,Most circuit functions raise CircuitError for Qiskit-specific misuse.
"Given qc.cx(0,2) in Qiskit, which is control and which is target?","control=2, target=0","control=0, target=2",both are controls,depends on register names,"control=0, target=2",Controls come first in argument order.
"ASCII: Identify the operation

q0: ─H─■──
        │
q1: ────X──","CX with q0 control, q1 target, preceded by H on q0",CZ with q1 control,SWAP,Measure on q1,"CX with q0 control, q1 target, preceded by H on q0",■ at q0 and X at q1 denotes CX; H on q0 precedes it.
The easiest way to build a custom one-off Gate with a known decomposition is to:,Subclass Gate and override __array__,Build a QuantumCircuit and call to_gate()/to_instruction(),Directly edit CircuitInstruction,Use ParameterVector only,Build a QuantumCircuit and call to_gate()/to_instruction(),"to_gate()/to_instruction() yields a Gate/Instruction whose definition is that circuit, accessible to the transpiler."
"When subclassing Instruction/Gate, the method to lazily populate its decomposition is:",_define(),__array__,compose(),assign_parameters(),_define(),Subclasses implement _define() to set the cached _definition (a QuantumCircuit).
