Question,Answer A,Answer B,Answer C,Answer D,Correct Answer,Explanation
"In qiskit.providers, what is a 'provider' primarily responsible for?",Supplying abstract transpiler passes to Qiskit,Providing external services such as Backends to execute QuantumCircuits,Persisting experiment metadata to IBM Cloud,Only simulating circuits locally via Statevector,Providing external services such as Backends to execute QuantumCircuits,A provider exposes external services to Qiskit; the typical example is a Backend provider that yields Backend objects for executing QuantumCircuit objects.
Which statement best describes the versioning of provider interfaces in qiskit.providers?,All interfaces share a single global version number that changes each minor release,Interfaces are not versioned; only Qiskit releases are versioned,Each abstract class is versioned independently; new versions may be introduced with minor Qiskit releases,Version bumps only occur in major releases and are always backward compatible,Each abstract class is versioned independently; new versions may be introduced with minor Qiskit releases,"The docs specify that each providers interface abstract class is individually versioned, and a minor Qiskit release may increment any interface by one version."
What is Qiskit's provider interface version support policy?,New versions immediately deprecate old ones with no overlap,"A provider interface version is supported for a minimum of 3 minor releases or until the first release after 6 months, whichever is longer, before potential deprecation",All versions are supported indefinitely,Old versions are removed in the same release they are deprecated,"A provider interface version is supported for a minimum of 3 minor releases or until the first release after 6 months, whichever is longer, before potential deprecation","The policy grants providers time to migrate; after that window, standard deprecation policy applies."
Which of the following is NOT a required element of a BackendV2 implementation?,A 'target' property describing the backend for the transpiler,A 'max_circuits' property or None,A '_default_options' class method returning an Options object,A 'qobj' schema for circuit submission,A 'qobj' schema for circuit submission,"BackendV2 requires target, max_circuits, run(), and _default_options(). It does not require the legacy qobj schema."
What does BackendV2.target provide to the transpiler?,Runtime image tags for the backend,A model of the backend (via qiskit.transpiler.Target) to guide compilation,Only the coupling map of the backend,The list of job statuses supported by the backend,A model of the backend (via qiskit.transpiler.Target) to guide compilation,"Target encapsulates gate availability, qubit topology, instruction properties, etc., used by transpile()."
"In BackendV2._default_options(), what type should be returned?",A dictionary of option names to defaults,An Options object initialized with default values,A JSON string describing all options,No return is required; options are set via set_options() only,An Options object initialized with default values,"The docs show returning qiskit.providers.Options(shots=..., ...)."
"Which Options API feature lets you constrain acceptable user values (e.g., shots between 1 and 4096)?",Options.register(),Options.validate(schema=...),"Options.set_validator('shots', (1, 4096))","Options.add_constraint('shots', min=1, max=4096)","Options.set_validator('shots', (1, 4096))",Providers can attach validators to Options to enforce bounds and types.
What is the expected return type of BackendV2.run()?,A PrimitiveResult object,A JobV1 (or subclass) object representing the submitted job,A BackendProperties object,"A list of Result objects, one per circuit",A JobV1 (or subclass) object representing the submitted job,The provider's run() submits circuits and returns a Job handle; result() on the job later yields a qiskit.result.Result.
Which statement about provider jobs is TRUE according to the docs?,All jobs must be synchronous,"Async jobs expose status(), cancel(), and result(); sync jobs may directly hold a Result",Jobs cannot raise JobTimeoutError; only RuntimeJobV2 can,Jobs must always implement logs() like RuntimeJobV2,"Async jobs expose status(), cancel(), and result(); sync jobs may directly hold a Result",The docs show both async JobV1 examples and a sync job variant that returns a stored Result.
"When writing a Provider, what is its single primary purpose?",Optimizing circuits using custom passes,Managing authentication and returning Backend objects to execute circuits,Scheduling jobs on the OS process pool,Providing a GUI for selecting devices,Managing authentication and returning Backend objects to execute circuits,"The Provider class mainly exposes methods to list, filter, and get Backends, handling credentials as needed."
"To expose a custom single-qubit gate 'SY' in your backend basis, which step is NOT required?",Define an SYGate subclass of Gate with a unique name,Add SYGate to the Target with allowed qubits and InstructionProperties,Patch OneQubitEulerDecomposer in user code to decompose to SY,"Add equivalences (e.g., for H or U2) to SessionEquivalenceLibrary",Patch OneQubitEulerDecomposer in user code to decompose to SY,"Equivalences are needed; updating core decomposers is optional and long-term, not a required step to expose the gate."
How are multi-qubit gate availabilities expressed when adding to Target?,By setting a global coupling map string on BackendV2,"Using tuple keys (e.g., (0,1)) mapped to InstructionProperties in Target.add_instruction()",By listing edges in BackendProperties only,By setting backend.topology property,"Using tuple keys (e.g., (0,1)) mapped to InstructionProperties in Target.add_instruction()",The docs show mapping qubit tuples—order matters—to InstructionProperties for multi-qubit gates.
What hook points can a BackendV2 implement to supply custom transpiler stage plugins by name?,get_mapping_stage_plugin and get_retiming_stage_plugin,get_translation_stage_plugin and get_scheduling_stage_plugin,get_layout_stage_plugin and get_routing_stage_plugin,get_optimization_stage_plugin and get_noise_stage_plugin,get_translation_stage_plugin and get_scheduling_stage_plugin,These methods let a backend specify default plugin names for translation and scheduling stages.
"If your backend cannot handle real-time classical variables, what do the docs recommend?",Silently drop variables during transpile,Convert variables to parameters automatically in the provider,Document the limitation and reject such circuits early in Backend.run(),Reject only Store operations but allow other variable types,Document the limitation and reject such circuits early in Backend.run(),The guidance suggests checking QuantumCircuit.num_vars (and inside ControlFlow blocks) and failing fast if unsupported.
"How can a backend model parameter constraints (e.g., angle bounds) for a gate parameter in Target?",Use Options validators only,"Set angle_bounds=[(lower, upper)] when adding the instruction via Target.add_instruction()",Annotate the Gate subclass with __bounds__,Provide bounds in BackendProperties only,"Set angle_bounds=[(lower, upper)] when adding the instruction via Target.add_instruction()",Target.add_instruction accepts angle_bounds to constrain gate parameters; WrapAngles can transform out-of-bounds uses.
Which transpiler pass is referenced for handling angles outside bounded ranges and requires a wrapper function registry?,CommutativeCancellation,Optimize1qGatesDecomposition,WrapAngles,BasisTranslator,WrapAngles,The docs mention qiskit.transpiler.passes.WrapAngles and adding a wrapper in WRAP_ANGLE_REGISTRY.
Which class is the base for all versioned Job abstract classes in providers?,BasePrimitiveJob,JobV1,Job,RuntimeJobV2,Job,The table shows Job as the base common type for all versioned Job abstract classes; JobV1 is one concrete version.
Which exception is raised for backend lookup failures?,JobTimeoutError,QiskitBackendNotFoundError,JobError,QiskitError,QiskitBackendNotFoundError,The docs list QiskitBackendNotFoundError as the base class for errors while looking for a backend.
"In the provider 'run' example, what warning behavior is shown for unsupported kwargs?",Raise TypeError immediately,Silently ignore unknown kwargs,Issue a UserWarning indicating the option is not used,Convert unknown kwargs to backend properties,Issue a UserWarning indicating the option is not used,The example iterates kwargs and warns with UserWarning if an option is unused.
"How does qiskit.primitives relate to providers, per the 'Primitives' section?",Primitives are independent and cannot be customized by providers,"Providers can implement custom primitive implementations (e.g., Sampler/Estimator) optimized for their backends",Only BackendSamplerV2 can be implemented by providers,Providers must use Statevector primitives only,"Providers can implement custom primitive implementations (e.g., Sampler/Estimator) optimized for their backends",The module is designed so providers can supply optimized primitive implementations with extra processing or mitigation.
Which attribute is part of BackendV2 and limits batch size in a single job?,max_circuits,max_shots,max_depth,max_jobs,max_circuits,The required max_circuits property defines the batch limit (or None for no limit).
What does JobV1.result() typically return for async jobs in provider examples?,A list of PubResult objects,A qiskit.result.Result constructed from backend data,A PrimitiveResult,A Statevector object,A qiskit.result.Result constructed from backend data,The example builds a Result dict and returns Result.from_dict(...).
"For custom basis gates, where should equivalence rules be registered so transpile() can convert standard gates?",SessionEquivalenceLibrary,BackendProperties,PassManager,Target.equivalences,SessionEquivalenceLibrary,The examples add equivalences to SessionEquivalenceLibrary on import.
What is the recommended way for a Provider to filter available backends?,Override BackendV2.filter() on each backend,Use qiskit.providers.providerutils.filter_backends in the Provider.backends() method,Rely on transpiler to select compatible backends automatically,Return all backends without filtering,Use qiskit.providers.providerutils.filter_backends in the Provider.backends() method,The sample Provider shows using filter_backends to apply filters/kwargs.
Which table entry lists an object describing qubit-level characteristics in providers?,Options,QubitProperties,BackendProperties,TranspileConfig,QubitProperties,The abstract class list includes QubitProperties as a representation of a qubit's properties.
"If your backend requires special scheduling and translation steps for efficiency, how can this be set by default?",Define get_scheduling_stage_plugin() and get_translation_stage_plugin() to return plugin names,Patch PassManager.run to insert passes,Set backend.options.translation_plugin and scheduling_plugin,Set Target.default_plugins,Define get_scheduling_stage_plugin() and get_translation_stage_plugin() to return plugin names,These BackendV2 hook points let transpile() pick provider-specified plugins by default.
Which JobStatus value indicates a job failed to complete successfully in providers' JobStatus enum?,RUNNING,DONE,CANCELLED,ERROR,ERROR,JobStatus includes ERROR to indicate failure; provider examples also map to DONE/RUNNING/ERROR.
What should a provider do to integrate authentication needs?,Implement it in BackendV2.run() only,Handle credentials in the Provider's initialization and use them when returning backends,Store credentials in a global environment variable only,Require the user to pass credentials to every run() call,Handle credentials in the Provider's initialization and use them when returning backends,The Provider class is expected to handle credentials/auth during its creation.
Which of the following is TRUE about providers' version support vs providers themselves?,Providers must keep supporting old versions as long as Qiskit does,Providers can update to newer interface versions at their own pace; Qiskit's window ensures compatibility during their deprecation cycle,Providers cannot deprecate end-user-impacting changes,Providers are required to upgrade in lockstep with Qiskit releases,Providers can update to newer interface versions at their own pace; Qiskit's window ensures compatibility during their deprecation cycle,The policy is for Qiskit's support window; providers may migrate earlier and deprecate in their user interface first.
Which of the following best describes the relationship between BackendV2.run() and the returned Job object?,run() returns a synchronous Result; Job is unused,run() returns a JobV1 handle; Job.result() blocks until completion and returns a Result,run() returns a PrimitiveResult with counts,run() yields a generator of Result objects,run() returns a JobV1 handle; Job.result() blocks until completion and returns a Result,The examples emphasize async job handles with status/cancel/result methods.
